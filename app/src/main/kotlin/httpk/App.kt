/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package httpk

import httpk.handler.EchoHandler
import kotlinx.coroutines.*
import java.net.ServerSocket
import java.net.Socket

fun log(message: String) = println("[LOG] [${Thread.currentThread().name}] $message")

class App(val port: Int, val isDebug: Boolean) {
    init {
        if (isDebug) {
            System.setProperty("kotlinx.coroutines.debug", "on")
        }
    }
    fun start() = runBlocking {
        val serverSocket = initServerSocketSuspend()
        log("server start. waiting on port $port")

        serverSocket.use {
            while (true) {
                val socket = acceptSuspend(it)
                launch { EchoHandler().handle(socket) }
            }
        }
    }

    //
    // private
    //

    private suspend fun acceptSuspend(it: ServerSocket): Socket {
        return withContext(Dispatchers.IO) { it.accept() }
    }

    private suspend fun initServerSocketSuspend(): ServerSocket {
        return withContext(Dispatchers.IO) { ServerSocket(port) }
    }

}

fun main() {
    App(port = 8080, isDebug = true).start()
}
